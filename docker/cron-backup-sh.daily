#!/bin/bash

DAY=$(date +%d)
PERIOD='daily'
OK="\t[\e[92m✓\e[0m]"
KO="\t[\e[91m✗\e[0m]"

if [[ $SQLITE == 'True' ]]
    then
        NOW=$(date +'%Y-%m-%d %H:%M:%S')
        DBFILE="/tmp/$DAY-dump-$SQLITE_FILE.SQL"
        ZIPFILE="/tmp/$DAY-dump-$SQLITE_FILE.SQL.zip"

        if [[ -e "$SQLITE_PATH/$SQLITE_FILE" ]]
            then
                echo    "$NOW [$PERIOD] $SQLITE_PATH/$SQLITE_FILE"
                echo -n "$NOW [$PERIOD]  └> Dumping"
                cp -a "$SQLITE_PATH/$SQLITE_FILE" /tmp/
                sqlite3 "/tmp/$SQLITE_FILE" .dump > $DBFILE
                if [[ -e "$DBFILE" ]]
                    then
                        echo -e $OK
                        echo -n "$NOW [$PERIOD]  └> Zipping"
                        zip -qq $ZIPFILE $DBFILE
                        if [[ -e "$ZIPFILE" ]]
                            then
                                echo -e $OK

                                if [[ $RCLONE_CONFIG_PCS_TYPE == 'swift' ]]
                                    then
                                        echo -n "$NOW [$PERIOD]  └> Rcloning"
                                        rclone sync $ZIPFILE pcs:"$RCLONE_CONFIG_PCS_DIR"/"$PERIOD"/
                                        if [[ $? -eq 0 ]]; then echo -e $OK; else echo -e $KO; fi
                                    else
                                        echo -n "$NOW [$PERIOD]  └> Rsyncing"
                                        sshpass -p "$PCA_PASS" rsync -e "ssh -o StrictHostKeyChecking=no" -a $ZIPFILE "$PCA_USER"@"$PCA_HOST":"$PCA_DIR"/"$PERIOD"/
                                        if [[ $? -eq 0 ]]; then echo -e $OK; else echo -e $KO; fi
                                fi

                                echo -n "$NOW [$PERIOD]  └> Cleaning"
                                rm $ZIPFILE "/tmp/$SQLITE_FILE"
                                if [ ! -f $ZIPFILE ]; then echo -e $OK; else echo -e $KO; fi
                            else
                                echo -e $KO
                            fi
                        rm $DBFILE
                    else
                        echo -e $KO
                fi
        fi
fi

for DB_NAME in `echo $DB_LIST | tr "," "\n"`;do
    NOW=$(date +'%Y-%m-%d %H:%M:%S')
    ZIPFILE="/tmp/$DAY-dump-$DB_NAME.SQL.zip"
    DBFILE="/tmp/dump-$DB_NAME.SQL"

    echo    "$NOW [$PERIOD] $DB_HOST/$DB_NAME"
    echo -n "$NOW [$PERIOD]  └> Dumping"
    mysqldump --opt --lock-tables --user=$DB_USER --password=$DB_PASS --host=$DB_HOST $DB_NAME > $DBFILE
    if [[ -e "$DBFILE" ]]
        then
            echo -e $OK
            echo -n "$NOW [$PERIOD]  └> Zipping"
            zip -qq $ZIPFILE $DBFILE
            if [[ -e "$ZIPFILE" ]]
                then
                    echo -e $OK

                    if [[ $RCLONE_CONFIG_PCS_TYPE == 'swift' ]]
                        then
                            echo -n "$NOW [$PERIOD]  └> Rcloning"
                            rclone sync $ZIPFILE pcs:"$RCLONE_CONFIG_PCS_DIR"/"$PERIOD"/
                            if [[ $? -eq 0 ]]; then echo -e $OK; else echo -e $KO; fi
                        else
                            echo -n "$NOW [$PERIOD]  └> Rsyncing"
                            sshpass -p "$PCA_PASS" rsync -e "ssh -o StrictHostKeyChecking=no" -a $ZIPFILE "$PCA_USER"@"$PCA_HOST":"$PCA_DIR"/"$PERIOD"/
                            if [[ $? -eq 0 ]]; then echo -e $OK; else echo -e $KO; fi
                    fi

                    echo -n "$NOW [$PERIOD]  └> Cleaning"
                    rm $ZIPFILE
                    if [ ! -f $ZIPFILE ]; then echo -e $OK; else echo -e $KO; fi
                else
                    echo -e $KO
                fi
            rm $DBFILE
        else
            echo -e $KO
        fi
done;
